which numbers are too low & require treatment?



strategies: 
1.offline data augmentation,

2.class-weighted loss functions : modify the loss function to have more weightage for the smaller class 
https://forums.fast.ai/t/how-to-use-class-weights-in-loss-function-for-imbalanced-dataset/19589  
https://www.kaggle.com/tanlikesmath/oversampling-mnist-with-fastai 

3. imbalanced data sampling - same as point 2

4. Early stopping:

5. You can also explore changing learning rate, as in fastai tutorials.

6. Creating multiple hierarchical models to balance the dataset, in this case good vs rest, then defect1 vs rest, then defect2 vs defect3 
(Good 94, defect1 32, Rust 11, Grind_Marks 7)

7. check how to change probability thresholds in fastai, to change the class assignments? - may not be feasible / useful for multiclass

8. progressive re-sizing – the images are large & some of the defects are small. Re-sizing images may be leading to information loss. There is a fastai blog on this – google “progressive resizing fastai)  https://forums.fast.ai/t/progressive-resizing-in-fastai-v1/25004/3

9. Test Time Augmentation in Fastai - Research - not working



https://twitter.com/jeremyphoward/status/1175177461920698368  oversampling is supposed to work better than class weights
https://medium.com/analytics-vidhya/image-data-augmentation-to-balance-dataset-in-classification-tasks-5e25bbd9a228 



https://github.com/qmaruf/fastai-1/blob/master/Multi-label%20classification%20-%20Understanding%20the%20Amazon%20from%20space.ipynb   
link for image resizing & TTA



###   Data augmentation for object detection needs to ensure bbox information is correctly updated when transforms (involving changes to object locations/ orientations) are applied
need to see: generalising for different bbox formats ; saving the transformed image & bbox coordinates

https://github.com/albumentations-team/albumentations
https://colab.research.google.com/drive/1JuZ23u0C0gx93kV0oJ8Mq0B6CBYhPLXy#scrollTo=GwFN-In3iagp&forceEdit=true&offline=true&sandboxMode=true 
https://blog.roboflow.com/yolov4-data-augmentation/           
https://albumentations.ai/docs/examples/example_bboxes/ 
https://blog.roboflow.com/why-preprocess-augment/













# https://towardsdatascience.com/complete-image-augmentation-in-opencv-31a6b02694f5  (color changes while viewing using openCV)

# https://towardsdatascience.com/color-identification-in-images-machine-learning-application-b26e770c4c71 
after the line "img = cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)" ,
add this & cross-check "image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)" 

# Fastai-based implementation of brightness augmentation
# https://github.com/albumentations-team/albumentations
# https://colab.research.google.com/drive/1JuZ23u0C0gx93kV0oJ8Mq0B6CBYhPLXy#scrollTo=GwFN-In3iagp&forceEdit=true&offline=true&sandboxMode=true 


# another lib https://github.com/aleju/imgaug 
# GitHub - ildoonet/unsupervised-data-augmentation: Unofficial PyTorch Implementation of Unsupervised Data Augmentation.


