https://blog.roboflow.ai/getting-started-with-cvat/

 
https://stackoverflow.com/questions/54374935/how-to-fix-this-strange-error-runtimeerror-cuda-error-out-of-memory
Changed a few parameters : batch size, width and height 
https://blog.roboflow.ai/training-yolov4-on-a-custom-dataset/   lower no. of subdivisions & max_batches


1. How to assess localization algo has trained sufficiently – is there an optimal mAP ? 
  Right now, we are stopping when there are no changes in mAP for a few cycles.
  can look at loss <= half of starting loss

2. Generally, we use the val set to tune model parameters & find optimal model – is something similar being done for localization? 
  Which parameters are we tuning for localization?
https://medium.com/hackernoon/efficient-implementation-of-mobilenet-and-yolo-object-detection-algorithms-for-image-annotation-717e867fa27d 

3. If we are not using the val set to tune for alternate models & only using for testing, do we need a separate test set? 

4. We should also be checking recall, not just precision (as in pycoco tool)



##################################################

###   yolo training  ###

# clone the repo
# set GPU card config in makefile (line no. 27-50)
# install using make

# prepare the dataset & the annotations ( .txt file in the same directory with the same name. 
# Each text file contains the class id and coordinates of a bounding box for every object as shown below
# <object-class> <x_center> <y_center> <width> <height> 
# <x_center> <y_center> <width> <height> are float values relative to width and height of image,
# it can be equal from (0.0 to 1.0])
# if the annotations in the source data are not in yolo format, convert to that format using https://github.com/ssaru/convert2Yolo

# create configuration file (.cfg) & set model parameters here
# copy yolo4-custom.cfg now - rename the copied file to yolo-obj.cfg

# create the following files describing the data
# obj.names, obj.data, train.txt, validate.txt, test.txt

# download the pre-trained weights "yolov4.conv.137" for the convolutional layers and put in the directory build\darknet\x64

# After training is complete weights will be saved as yolo-obj_last.weights for every 100 iterations and 
# saved as yolo-obj_xxxx.weights for every 1000 iterations in the directory build\darknet\x64\backup

# test predictions

# saving intermediate checkpoints: intermediate weights saved in folder: build/darknet/x64/backup/

https://medium.com/ai-world/how-to-train-yolov4-for-custom-objects-detection-in-google-colab-1e934b8ef685
https://medium.com/analytics-vidhya/implementing-yolov4-to-detect-custom-objects-using-google-colab-6691c98b15ff


#############

check if localization algo works with empty annotation file - yes.
Yolo requires empty .txt files. 
We need to add negative images, if there are certain classes which are present & similar to our classes of interest, but which we don't want to detect. 
For defective parts, the images should already be having the good part of the sheet in the background, & so we will not require separate good images for training.



# Saving predicted box information in text files:
Save the paths of test images in a file & send it to the following code - I did not get segmentation fault with any of the following:

OPTION 1: the output is as json file, & coordinates are in fraction format, & centre_x, centre_y, width, height
!./darknet detector test ./build/darknet/x64/data/obj.data ./build/darknet/x64/cfg/yolo-obj.cfg \
  ./build/darknet/x64/backup/yolov4_60_20_20/yolo-obj_last.weights \
  -ext_output -dont_show -out result.json < ./infer_image_list.txt


OPTION 2: output is text file; it has pixel coordinates, but also additional info in the file
!./darknet detector test ./build/darknet/x64/data/obj.data ./build/darknet/x64/cfg/yolo-obj.cfg \
  ./build/darknet/x64/backup/yolov4_60_20_20/yolo-obj_last.weights \
  -dont_show -ext_output < ./infer_image_list.txt > pred_coord2.txt
  
  
  
##############################################################

Editing darknet Makefile from colab

!cat Makefile   # see contents of makefile
!sed -i 's/ARCH= -gencode arch=compute_37,code=sm_37/#ARCH= -gencode arch=compute_37,code=sm_37/g' Makefile
!sed -i 's/#ARCH= -gencode arch=compute_75,/ARCH= -gencode arch=compute_75,/g' Makefile  # making changes
!cat Makefile   # verify changes were made




